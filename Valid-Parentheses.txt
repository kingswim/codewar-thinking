Write a function called validParentheses that takes a string of parentheses, and determines if the order of the parentheses is valid. validParentheses should return true if the string is valid, and false if it's invalid.

Examples:
validParentheses( "()" ) => returns true
validParentheses( ")(()))" ) => returns false
validParentheses( "(" ) => returns false
validParentheses( "(())((()())())" ) => returns true

All input strings will be nonempty, and will only consist of open parentheses '(' and/or closed parentheses ')'
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

def validParentheses(str1):
    middle=len(str1)/2
    if 
    a=str1[:len(str1)/2]
    b=str1[len(str1/2:)]


()()()()()()()

(((())))()()()  可以用分治法或者二分法  ，从而成为log(n)的算法

"223454"

6 3  3-1

7 3

if a[-1]=='('  return false
if a[0]==')'   return false



if k%2==0 k=len(a)/2 -1
if k%2==1 k =int(len(a)/2)
total = len(a)

t1=a[0,k]  t2=a[k:total]


if count(t1,left1)!=0 and left1!='('   return false
if count(t2,left2)!=0 and left2!=')'   return false

if left1!=left2     return false 
---------------------------------------------------------
def valid_parentheses(b):
    if b[-1]=='('  return false
    if b[0]==')'   return false

    def getcount(a):
        t=len(a)
        k= int(t/2) 
        if t==1 and t[0]=='(': return 1
        elif t==1 and t[0]==')' : return -1
        elif t==1 :return 0

        if getcount(t1)<0 
        t1=a[0:k]
        t2=a[k:t]
        return getcount(t1)+getcount(t2)
    k=getcount(b)
    t = False if k!=0 else True
    return t

Testing for sn)hirrnxjk(xn)i(()c
It should work for random inputs too: True should equal False

所以可以考虑推进 ，即是left side 如国得到负数，就是左边')'超过数量，代表不符合，但是怎么标记左边 
-------------------------------------------------------------------------------------------------
def valid_parentheses(b):
    if b[-1]=='('  return false
    if b[0]==')'   return false
    def getcount(a,k):
        t=len(a)
        k=int(t/2)
        
        a[0:k]
        a[k:]
       d1 ={level:[a,b]} 记录当前层的（与）的数量 a是(的数量，b是)的数量，level是哪块 层加哪块区间
                                                  level 可以取开始到结束的坐标的pair   (start,end) ,以k为源点，开始计算



       t="())()()()|()(()())("
       l=len(t)=19

       t[8] 就是第9个 ，t[0:9]是前9个 t[9:]是后面10个
       k=t/2=9
       k是坐标原点
       左边是left= t[k-k :k]           level＝int (l/k),
       右边是 right= t[k:l]

       再分就是

0-level : "())()()()|()(()())("
1-level : "())()()()"    "|()(()())("   k=9    left= t[k-k :k]  right= t[k:l]
2-level : "())("  ")()()"  "|()(("  ")())("  k1=4, k2=5   出现问题与分歧点


因为不是2的倍数，所以想到将其补为2的倍数   19最近的2的倍数是32  ，我补给它13个无意义的‘？’
形成  "())()()()|()(()())("  +'?'*13   =

0-level :                               l=k=32    
1-level : '())()()()|()(()(' + '))(?????????????'    k=16  left=t[k-k:k] right=t[k:l]
2-level : 

设置逆变符   dooppsite  if 

然后发现这个题目就必需回溯

def valid_parentheses(b):
    t={'(':0,')':0}
    if b[-1]=='(': return false
    if b[0]==')' : return false
    for i in b:
        if i =='(' :
           t[i]+=1
        elif i==')':
           if t['(']==0:
              return False
           t['(']-=1
    if t['(']!=0 :
       return False
    if t['(']==0:
       return True

于是这就是最终版本了，仍然是n的复杂度

       k是中间值
      getcount(a[0:k/2]) + getcount(a[k/2:k])
        


        getcount(d1,k，)








          |
 ())()()()|()(()())(
          |










---------------------------------------------------------/不是尾递规的

def valid_parentheses(b):
    if b[-1]=='('  return false
    if b[0]==')'   return false
    def getcount(t1=0,left,right,t):
        t=len(a)
        k = int(t/2)

        if left==right:

        return getcount(t1,)
    k=getcount(b)
    t = False if k!=0 else True
    return t
i-----------------------------------------------------------
设置一个中轴，同时向两个方向延伸，可以递规  getcount (mid-x,mid,mid+x)这样也只是 n/2 /2   不会 log(n)
但是这样可以 尾递规

如何将这个中轴转为2个
(start,start+t,end-t,end)
(start,start+t) ()   (end-t,end)
h= log(t

fibnaci  是能自左往右推进
但这个是要自最外面向各个分区推进  这种推进因为分区的变动，而变的困难 







(()))(     (())()())
